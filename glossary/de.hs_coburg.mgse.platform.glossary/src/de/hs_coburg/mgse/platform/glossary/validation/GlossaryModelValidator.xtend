/*
 * generated by Xtext 2.12.0
 */
package de.hs_coburg.mgse.platform.glossary.validation

import de.hs_coburg.mgse.platform.glossary.glossaryModel.Glossary
import org.eclipse.xtext.validation.Check
import de.hs_coburg.mgse.platform.glossary.glossaryModel.GlossaryModelPackage
import org.eclipse.xtext.validation.CheckType

/**
 * This class contains custom validation rules. 
 *
 * See https://www.eclipse.org/Xtext/documentation/303_runtime_concepts.html#validation
 */
class GlossaryModelValidator extends AbstractGlossaryModelValidator {
	
//	public static val INVALID_NAME = 'invalidName'
//
//	@Check
//	def checkGreetingStartsWithCapital(Greeting greeting) {
//		if (!Character.isUpperCase(greeting.name.charAt(0))) {
//			warning('Name should start with a capital', 
//					GlossaryModelPackage.Literals.GREETING__NAME,
//					INVALID_NAME)
//		}
//	}

	@Check(CheckType.FAST)
	def checkAbbreviations(Glossary glossary){
		val abbreviations = glossary.entries.map[e | e.information.abbreviation]
		for(var i = 0; i<abbreviations.length; i++){
			val currentAbbreviation = abbreviations.get(i)
			if(abbreviations.filter[it == currentAbbreviation].size > 1){
				error('Duplicate Abbreviation', GlossaryModelPackage.Literals.GLOSSARY__ENTRIES, i)
			}
		}
	}
	
	@Check(CheckType.FAST)
	def checkWords(Glossary glossary){
		val words = glossary.entries.map[e | e.information.word]
		for(var i = 0; i<words.length; i++){
			val currentWord = words.get(i)
			if(words.filter[it == currentWord].size > 1){
				error('Duplicate Word', GlossaryModelPackage.Literals.GLOSSARY__ENTRIES, i)
			}
			if(currentWord.isEmpty){
				error('Word should not be empty', GlossaryModelPackage.Literals.GLOSSARY__ENTRIES, i)
			}
		}
	}
	
	@Check(CheckType.FAST)
	def checkEntryNames(Glossary glossary){
		val entries = glossary.entries
		for(var i = 0; i<entries.length; i++){
			val currentEntry = entries.get(i)
			if(entries.filter[it.name == currentEntry.name].size > 1){
				error('Duplicate Entry ID', GlossaryModelPackage.Literals.GLOSSARY__ENTRIES, i)
			}
		}
	}
	
}
