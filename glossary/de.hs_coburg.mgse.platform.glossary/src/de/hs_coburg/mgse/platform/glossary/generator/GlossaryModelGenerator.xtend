/*
 * generated by Xtext 2.12.0
 */
package de.hs_coburg.mgse.platform.glossary.generator

import de.hs_coburg.mgse.platform.glossary.glossaryModel.Glossary
import de.hs_coburg.mgse.platform.glossary.glossaryModel.GlossaryEntry
import de.hs_coburg.mgse.platform.glossary.glossaryModel.GlossarySection
import org.eclipse.emf.ecore.resource.Resource
import org.eclipse.xtext.generator.AbstractGenerator
import org.eclipse.xtext.generator.IFileSystemAccess2
import org.eclipse.xtext.generator.IGeneratorContext
import java.util.Collection
import java.util.LinkedList

/**
 * Generates code from your model files on save.
 * 
 * See https://www.eclipse.org/Xtext/documentation/303_runtime_concepts.html#code-generation
 */
class GlossaryModelGenerator extends AbstractGenerator {

	private int g_counter = 0;
	private int gs_counter = 0;
	private int ge_counter = 0;
	private Collection<Glossary> toVisit
	
	new(){
		toVisit = null
	}

	override void doGenerate(Resource resource, IFileSystemAccess2 fsa, IGeneratorContext context) {
		// First iteration
		if(toVisit === null){
			val allGlossariesToGenerate = resource.resourceSet.resources.map[r | r.allContents.toIterable.filter(Glossary)].flatten
			println("Generate: " + allGlossariesToGenerate)
			toVisit = new LinkedList<Glossary>
			toVisit.addAll(allGlossariesToGenerate)
			fsa.generateFile("GlossaryModelCreator.java", compileGlossaries(toVisit))
		} 
		
		
		for(e: resource.allContents.toIterable.filter(Glossary)) {
			fsa.generateFile(
				e.name.toLowerCase() + ".html",
				e.compileHTML
			)
			fsa.generateFile(
				e.name.toLowerCase() + ".css",
				compileCSS
			)
			/* 
			fsa.generateFile(
				"Glossary"+(g_counter++).toString()+"ModelCreator.java",
            	e.compileModelCreatorGlossary
			)*/
		}
		for(e: resource.allContents.toIterable.filter(GlossarySection)) {
			fsa.generateFile(
            	"GlossarySection.java",
            	e.compileEntityBean
            )
		}
		for(e: resource.allContents.toIterable.filter(GlossaryEntry)) {
			fsa.generateFile(
            	"GlossaryEntry.java",
            	e.compileEntityBean
            )
		}
	}
	
	def compileGlossaries(Collection<Glossary> glossaries)'''
		package de.hs_coburg.mgse.modelcreator;
		
		import de.hs_coburg.mgse.persistence.HibernateUtil;
		import javax.persistence.EntityManager;		
		import java.util.ArrayList;
		import java.util.List;
		
		import de.hs_coburg.mgse.persistence.model.Glossary;
		import de.hs_coburg.mgse.persistence.model.GlossaryEntry;
		import de.hs_coburg.mgse.persistence.model.GlossarySection;
		
		public class GlossaryModelCreator {
		    public static boolean createModel() {
		        boolean resp = true;
		        return resp;
		    }
		    
			private static void setGlossaryEntryMaterials(GlossaryEntry ge, String word, String meaning, String abbreviation) {
				ge.setWord(word);
		        ge.setMeaning(meaning);
		        ge.setAbbreviation(abbreviation);
			}
		    
			//«g_counter=0»: Glossary
			«FOR g: glossaries»
			private static boolean createModelPart«g_counter++»() {
				try {
					EntityManager em = HibernateUtil.getEntityManager();
					em.getTransaction().begin();

					Glossary g = new Glossary();
					List<GlossarySection> l_gs = new ArrayList<GlossarySection>();

					«FOR gs: g.sections»
						GlossarySection gs_«gs_counter» = new GlossarySection();
						List<GlossaryEntry> l_ge_«gs_counter» = new ArrayList<GlossaryEntry>();
					
						«FOR ge: gs.entries»
							GlossaryEntry ge_«ge_counter» = new GlossaryEntry();
							setGlossaryEntryMaterials(ge_«ge_counter», "«ge.information.word»", "«ge.information.meaning»", "«ge.information.abbreviation»");
							l_ge_«gs_counter».add(ge_«ge_counter»);
							//«ge_counter++»
						«ENDFOR»
					
						gs_«gs_counter».setEntries(l_ge_«gs_counter»);
						gs_«gs_counter».setCompleteName("«gs.completeName»");
					
						l_gs.add(gs_«gs_counter»);
						//«gs_counter++»
					«ENDFOR»
				
					g.setSections(l_gs);
					em.persist(g);
					
					//commit and close Transaction
					em.getTransaction().commit();
					return true;
				} catch(Exception e) {
					e.printStackTrace();
					return false;
				}
			}
			«ENDFOR»
		}
	'''
	
	/*
	def compileModelCreatorGlossary(Glossary g)'''
		package de.hs_coburg.mgse.modelcreator;
		
		import de.hs_coburg.mgse.persistence.HibernateUtil;
		import javax.persistence.EntityManager;		
		import java.util.ArrayList;
		import java.util.List;
		
		import de.hs_coburg.mgse.persistence.model.Glossary;
		import de.hs_coburg.mgse.persistence.model.GlossaryEntry;
		import de.hs_coburg.mgse.persistence.model.GlossarySection;
		
		public class GlossaryModelCreator {
		    public static boolean createModel() {
		        boolean resp = true;
		        try {
		            EntityManager em = HibernateUtil.getEntityManager();
		            em.getTransaction().begin();
		
					Glossary g = new Glossary();
					List<GlossarySection> l_gs = new ArrayList<GlossarySection>();
					
					«FOR gs: g.sections»
						GlossarySection gs_«gs_counter» = new GlossarySection();
						List<GlossaryEntry> l_ge_«gs_counter» = new ArrayList<GlossaryEntry>();
						
						«FOR ge: gs.entries»
							GlossaryEntry ge_«ge_counter» = new GlossaryEntry();
							ge_«ge_counter».setWord("«ge.information.word»");
							ge_«ge_counter».setMeaning("«ge.information.meaning»");
							ge_«ge_counter».setAbbreviation("«ge.information.abbreviation»");
							l_ge_«gs_counter».add(ge_«ge_counter»);
							//«ge_counter++»
						«ENDFOR»
						
						gs_«gs_counter».setEntries(l_ge_«gs_counter»);
						gs_«gs_counter».setCompleteName("«gs.completeName»");
						
						l_gs.add(gs_«gs_counter»);
						//«gs_counter++»
					«ENDFOR»
					
					g.setSections(l_gs);
					em.persist(g);
					
		            //commit and close Transaction
		            em.getTransaction().commit();
		            //em.close();
		        } catch(Exception e) {
		            e.printStackTrace();
		            resp = false;
		        }
		        return resp;
		    }
		}
	'''
	*/
	
	def compileModelCreatorGlossarySection(GlossarySection gs) '''
	
	'''
	
	def compileHTML(Glossary glossary)'''
		<!DOCTYPE html>
		<html>
		
		<head>
		    <meta charset="utf-8">
		    <title>«glossary.name» </title>
		    <meta name="viewport" content="width=device-width, initial-scale=1">
		
		    <!-- bootstrap first, so we can overwrite values if needed -->
		    <link rel="stylesheet" href="https://maxcdn.bootstrapcdn.com/bootstrap/4.0.0/css/bootstrap.min.css" integrity="sha384-Gn5384xqQ1aoWXA+058RXPxPg6fy4IWvTNh0E263XmFcJlSAwiGgFAW/dAiS6JXm" crossorigin="anonymous">
		    <link href="./«glossary.name.toLowerCase()».css" rel="stylesheet">
		</head>
		
		    <body>
		    
		    <!-- beginning of generated stuff once we add this to the actual project -->
		    <div class="glossary">
			    «FOR glossarySection: glossary.sections»
			    	«glossarySection.compileHTML»
			    «ENDFOR»
		    </div> <!-- end of glossary -->
		    <!-- end of generated stuff once we add this to the actual project -->
		
		    <!-- we need this here -->
		    <script src="https://code.jquery.com/jquery-3.2.1.slim.min.js" integrity="sha384-KJ3o2DKtIkvYIK3UENzmM7KCkRr/rE9/Qpg6aAZGJwFDMVNA/GpGFF93hXpG5KkN" crossorigin="anonymous"></script>
		    <script src="https://cdnjs.cloudflare.com/ajax/libs/popper.js/1.12.9/umd/popper.min.js" integrity="sha384-ApNbgh9B+Y1QKtv3Rn7W3mgPxhU9K/ScQsAP7hUibX39j7fakFPskvXusvfa0b4Q" crossorigin="anonymous"></script>
		    <script src="https://maxcdn.bootstrapcdn.com/bootstrap/4.0.0/js/bootstrap.min.js" integrity="sha384-JZR6Spejh4U02d8jOt6vLEHfe/JQGiRRSQQxSfFWpi1MquVdAyjUar5+76PVCmYl" crossorigin="anonymous"></script>
		
		    </body>
		
		</html>
	'''
	
	def compileHTML(GlossarySection glossarySection)'''
		<div class="glossary__section-header">
			«glossarySection.completeName»
		</div>
		<table class="table table-striped table-hover table-sm">
		<thead>
		    <tr>
		        <th scope="col">Abk&uuml;rzung</th>
		        <th scope="col">Wort</th>
		        <th scope="col">Bedeutung</th>
		    </tr>
		    </thead>
		    <tbody>
		    «FOR glossaryEntry: glossarySection.entries»
		    <tr>
		    	«glossaryEntry.compileHTML»
		    </tr>
		    «ENDFOR»
		    </tbody>
		</table>
	'''
	
	def compileHTML(GlossaryEntry entry)'''
		<td>«entry.information.abbreviation»</td>
		<td>«entry.information.word»</td>
		<td>«entry.information.meaning»</td>
	'''
	
	def compileCSS()'''
		.glossary {
			border: 1px solid #ff0000;
		}
		
		.glossary__section-header {
			font-size: 1.3em;
			font-weight: 700;
		}
	'''
	
	def compileEntityBean(GlossarySection gs)'''
		import javax.persistence.*;
		import java.util.List;
	
		@Entity(name = "GlossarySection")
		@Table(name = "GLOSSARYSECTION")
		public class GlossarySection {
			@Id @GeneratedValue
			@Column(name = "id", nullable = false)
			private Long id;
			
			@Column(name = "name", nullable = false)
			private String name;
			
			@OneToMany(cascade = CascadeType.ALL)
			private List<GlossaryEntry> entries = new ArrayList<>();
			
			//getter and setter
			public Long getId() {
		    	return id;
		   	}
			   
			public void setId(Long id) {
		  		id = id;
			}
			
			public String getName() {
				return name;
			}

			public void setName(String name) {
				name = name;
			}
		}
	'''
	def compileEntityBean(GlossaryEntry ge)'''
		import javax.persistence.*;
	
		@Entity(name = "GlossaryEntry")
		@Table(name = "GLOSSARYENTRY")
		public class GlossaryEntry {
			
			@Id @GeneratedValue
			@Column(name = "id", nullable = false)
			private Long id;
			
			«FOR glossaryEntryInformation: ge.information.eClass.EAllAttributes»
			@Column(name = "«glossaryEntryInformation.name»", nullable = false)
			«IF glossaryEntryInformation.EAttributeType.name.substring(1) != "String"»
			private «glossaryEntryInformation.EAttributeType.name.substring(1).toFirstLower» «glossaryEntryInformation.name»;
			 
			«ELSE»
			private «glossaryEntryInformation.EAttributeType.name.substring(1)» «glossaryEntryInformation.name»;
			
			«ENDIF»
			«ENDFOR»
			//getter and setter
			public Long getId() {
				return id;
			}
									   
			public void setId(Long id) {
				id = id;
			}
			
			«FOR glossaryEntryInformation: ge.information.eClass.EAllAttributes»
			«IF glossaryEntryInformation.EAttributeType.name.substring(1) != "String"»
			public «glossaryEntryInformation.EAttributeType.name.substring(1).toFirstLower» get«glossaryEntryInformation.name.toFirstUpper»() {
				return «glossaryEntryInformation.name»;
			}
						
			public void set«glossaryEntryInformation.name.toFirstUpper»(«glossaryEntryInformation.EAttributeType.name.substring(1).toFirstLower» «glossaryEntryInformation.name») {
				«glossaryEntryInformation.name» = «glossaryEntryInformation.name»;
			}
						 
			«ELSE»						
			public «glossaryEntryInformation.EAttributeType.name.substring(1)» get«glossaryEntryInformation.name.toFirstUpper»() {
				return «glossaryEntryInformation.name»;
			}
			
			public void set«glossaryEntryInformation.name.toFirstUpper»(«glossaryEntryInformation.EAttributeType.name.substring(1)» «glossaryEntryInformation.name») {
				«glossaryEntryInformation.name» = «glossaryEntryInformation.name»;
			}
			
			«ENDIF»
			«ENDFOR»
		}
	'''
	
	
}
