/*
 * generated by Xtext 2.12.0
 */
package de.hs_coburg.mgse.platform.glossary.generator;

import com.google.inject.Inject;
import com.google.inject.Injector;
import com.google.inject.Provider;
import de.hs_coburg.mgse.platform.glossary.GlossaryModelStandaloneSetup;

import java.io.File;
import java.io.FilenameFilter;
import java.io.IOException;
import java.nio.file.Files;
import java.nio.file.Path;
import java.nio.file.Paths;
import java.util.Collection;
import java.util.HashSet;
import java.util.LinkedList;
import java.util.List;
import org.eclipse.emf.common.util.URI;
import org.eclipse.emf.ecore.resource.Resource;
import org.eclipse.emf.ecore.resource.ResourceSet;
import org.eclipse.xtext.generator.GeneratorContext;
import org.eclipse.xtext.generator.GeneratorDelegate;
import org.eclipse.xtext.generator.JavaIoFileSystemAccess;
import org.eclipse.xtext.util.CancelIndicator;
import org.eclipse.xtext.validation.CheckMode;
import org.eclipse.xtext.validation.IResourceValidator;
import org.eclipse.xtext.validation.Issue;

public class Main {

	public static void main(String[] args) {
		if (args.length < 2) {
			System.err.println("Aborting: no path to EMF resource provided!");
			System.err.println("You have to provide a source and destination directory.");
			return;
		}
		Injector injector = new GlossaryModelStandaloneSetup().createInjectorAndDoEMFRegistration();
		Main main = injector.getInstance(Main.class);
		main.runGenerator(args[0], args[1]);
	}

	@Inject
	private Provider<ResourceSet> resourceSetProvider;

	@Inject
	private IResourceValidator validator;

	@Inject
	private GeneratorDelegate generator;

	@Inject 
	private JavaIoFileSystemAccess fileAccess;

	protected void runGenerator(String in, String out) {	
		Collection<Path> glossaries = new HashSet<Path>();
		try {
			Files.walk(Paths.get(in))
				.filter(Files::isRegularFile)
				.filter(p -> p.toString().endsWith(".glossary"))
				.forEach(p -> glossaries.add(p));
		} catch (IOException e) {
			e.printStackTrace();
			System.err.println("Error");
			System.exit(1);
		}
		Path outputPath = Paths.get(out);
		glossaries.forEach(g -> {
			runGenerator(g, outputPath);	
		});
		
	}
	
	protected void runGenerator(Path input, Path outputPath) {
		// Load the resource
		ResourceSet set = resourceSetProvider.get();
		URI uri = URI.createFileURI(input.toString());
		Resource resource = set.getResource(uri, true);

		// Validate the resource
		List<Issue> list = validator.validate(resource, CheckMode.ALL, CancelIndicator.NullImpl);
		if (!list.isEmpty()) {
			for (Issue issue : list) {
				System.err.println(issue);
			}
			return;
		}

		// Configure and start the generator
		fileAccess.setOutputPath(outputPath.toString());
		GeneratorContext context = new GeneratorContext();
		context.setCancelIndicator(CancelIndicator.NullImpl);
		generator.generate(resource, fileAccess, context);

		System.out.println("Code generation finished. (" + input +")");
	}
}
