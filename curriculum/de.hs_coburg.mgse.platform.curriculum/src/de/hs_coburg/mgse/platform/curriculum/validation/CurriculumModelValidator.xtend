/*
 * generated by Xtext 2.12.0
 */
package de.hs_coburg.mgse.platform.curriculum.validation

import org.eclipse.xtext.validation.Check
import de.hs_coburg.mgse.platform.curriculum.curriculumModel.Curriculum
import de.hs_coburg.mgse.platform.curriculum.curriculumModel.CurriculumModelPackage
import de.hs_coburg.mgse.platform.curriculum.curriculumModel.CurriculumEntry
import org.omg.stub.java.rmi._Remote_Stub
import de.hs_coburg.mgse.platform.curriculum.curriculumModel.ConcreteExamType
import de.hs_coburg.mgse.platform.curriculum.utils.ConcreteExamTypeBehavior
import de.hs_coburg.mgse.platform.curriculum.utils.CurriculumEntryBehavior
import java.util.HashMap
import de.hs_coburg.mgse.platform.ser.validation.ModuleBehavior
import de.hs_coburg.mgse.platform.curriculum.curriculumModel.ModuleSpecification

/**
 * This class contains custom validation rules. 
 *
 * See https://www.eclipse.org/Xtext/documentation/303_runtime_concepts.html#validation
 */
class CurriculumModelValidator extends AbstractCurriculumModelValidator {
	extension ConcreteExamTypeBehavior = new ConcreteExamTypeBehavior
	extension CurriculumEntryBehavior = new CurriculumEntryBehavior
	extension ModuleBehavior = new ModuleBehavior
//	public static val INVALID_NAME = 'invalidName'
//
//	@Check
//	def checkGreetingStartsWithCapital(Greeting greeting) {
//		if (!Character.isUpperCase(greeting.name.charAt(0))) {
//			warning('Name should start with a capital', 
//					CurriculumModelPackage.Literals.GREETING__NAME,
//					INVALID_NAME)
//		}
//	}


	// "The version of a curriculum should be greater than 0."
	@Check
	def checkVersionOfCurriculum(Curriculum cur) {
		val version = cur.getVersion()
		if (version <= 0)
			error('The version of a curriculum should be greater than 0', cur, CurriculumModelPackage.Literals.CURRICULUM__VERSION)
	}

	// "The year of a curriculum should be greater than 0."
	@Check
	def checkYearOfCurriculum(Curriculum cur) {
		val year = cur.getYear()
		if (year <= 0)
			error('The year of a curriculum should be greater than 0', cur, CurriculumModelPackage.Literals.CURRICULUM__YEAR)
	}
	
	// "All specified modules of the curriculum have to be specified by the referenced SER."
	@Check
	def checkSpecifiedModules(Curriculum cur) {
		val allModules= cur.ser.studySections.map[ss | ss.modules].flatten
		val expectedModules = new HashMap
		
		for(module : allModules){
			var count = 1
			if(module.abstract){
				count = module.count
			}
			expectedModules.put(module, count)
		}
		
		val referencedModules = cur.curriculumEntries.map[ce | ce.moduleSpecification.module]
		for(expectedModule : expectedModules.keySet){
			val referencedModulesFiltered = referencedModules.filter[rm | rm === expectedModule]
			val actualCount = referencedModulesFiltered.size
			val expectedCount = expectedModules.get(expectedModule)
			if(actualCount != expectedCount){
				error('''According to the study and exmination regulations the module «expectedModule.name» has to be specified «expectedCount» times. Currently this module is specified «actualCount» times.''', cur, CurriculumModelPackage.Literals.CURRICULUM__NAME)
			}
		}
	}
	
	@Check
	def checkDetails(ModuleSpecification specification){
		val isAbstract = specification.module.abstract
		if(isAbstract){
			
			if(specification.details === null){
				error('''You are referencing an abstract module. You have to specify details about this module.''', specification, CurriculumModelPackage.Literals.MODULE_SPECIFICATION__MODULE)
			}
			if(specification.completeName === null){
				error('''You are referencing an abstract module. You have to specify the complete name of module.''', specification, CurriculumModelPackage.Literals.MODULE_SPECIFICATION__MODULE)
			}
		} else {
			if(specification.details !== null){
				error('''Module is already concrete.''', specification, CurriculumModelPackage.Literals.MODULE_SPECIFICATION__DETAILS)
			}
			if(specification.completeName !== null){
				error('''Module is already concrete.''', specification, CurriculumModelPackage.Literals.MODULE_SPECIFICATION__COMPLETE_NAME)
			}
		}
	}
	
	// "A concrete exam type of a module specification can only refer to exam types that are allowed by the referenced module."
	@Check
	def checkExamType(ConcreteExamType cet) {

		val referencedModule = cet.module;
		val referencedExamType = cet.examType
		
		if (!referencedModule.examTypes.contains(referencedExamType)) {
			error('Exam type is not allowed by the references module', cet, CurriculumModelPackage.Literals.CONCRETE_EXAM_TYPE__EXAM_TYPE)
		}
	}
	
	// "The value of a concrete exam type should be in range of the allowed exam type"
	@Check
	def checkExamTypeValue(ConcreteExamType cet) {
		val rangeLower = cet.examType.getLowerBound()
		val rangeUpper = cet.examType.getUpperBound()
		val value = cet.getValue()
		
		if (value < rangeLower || value > rangeUpper) {
			error('Value is not in range of ' + rangeLower + ' and ' + rangeUpper, cet, CurriculumModelPackage.Literals.CONCRETE_EXAM_TYPE__VALUE)
		}
	}
	
	// "The semester of a curriculum entry should be in range of the study section of the referenced module"
	@Check
	def checkSemesterOfCurriculumEntry(CurriculumEntry cEntry) {
		val semester = cEntry.getSemester()
		val studySection = cEntry.studySection
		val firstSemester = studySection.firstSemester
		val lastSemester = studySection.lastSemester
		
		if (semester < firstSemester || semester > lastSemester) {
			error('The semester of a curriculum entry should be in range of the study section of the referenced module', cEntry, CurriculumModelPackage.Literals.CURRICULUM_ENTRY__SEMESTER)
		}	
	}
	
	// "The course type of a curriculum entry must be defined in the referenced module."
	@Check
	def checkCourseTypeCurriculum(CurriculumEntry cEntry) {
		val possibleCourseTypes = cEntry.moduleSpecification.module.courseTypes
		val actualCourseTypes = cEntry.moduleSpecification.courseTypes
		
		for (var int i = 0; i < actualCourseTypes.size(); i++) {
			if (!possibleCourseTypes.contains(actualCourseTypes.get(i)))
				error('The course type of a curriculum entry must be defined in the referenced module', cEntry, CurriculumModelPackage.Literals.CURRICULUM__YEAR)
		}
	}	
}
